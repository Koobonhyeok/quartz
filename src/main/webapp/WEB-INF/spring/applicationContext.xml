<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mapper="http://mybatis.org/schema/mybatis-spring" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://mybatis.org/schema/mybatis-spring https://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!--  applicationContext는 생성 정보와 연관관계 정보에 대한 설정을 읽어 처리해준다. -->

    <mvc:annotation-driven/>
    
    <context:component-scan base-package="com.study.quartz" />

<!-- 	 	DB 연결시 사용   -->
<!--    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource"> -->
<!--         <property name="driverClass" value="com.mysql.jdbc.Driver"/> -->
<!--         <property name="connectionProperties"> -->
<!--             <value>zeroDateTimeBehavior=convertToNull</value> -->
<!--         </property> -->
<!--         <property name="url" value="jdbc:mysql://localhost:3306/test"/> -->
<!--         <property name="username" value="root"/> -->
<!--         <property name="password" value="1234"/> -->
<!--     </bean> -->

<!--     <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
<!--         <property name="dataSource" ref="dataSource"/> -->
<!--         <property name="mapperLocations"> -->
<!--             <list> -->
<!--                 <value>classpath:/sql/*.xml</value> -->
<!--             </list> -->
<!--         </property> -->
<!--     </bean> -->

<!--     <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache"> -->
<!--         <constructor-arg index="0" ref="sqlSession"/> -->
<!--     </bean> -->

<!--     <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!--         <property name="dataSource" ref="dataSource"/> -->
<!--     </bean> -->

<!--     <tx:advice id="txAdvice" transaction-manager="txManager"> -->
<!--         <tx:attributes> -->
<!--             <tx:method name="*" rollback-for="Exception"/> -->
<!--         </tx:attributes> -->
<!--     </tx:advice> -->

    <bean name="quartzJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="com.study.quartz.service.QuartzJob"/>
<!--         <property name="durability" value="true"/> -->
    </bean>

    <bean id="quartzCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="quartzJob"/>
        <property name="cronExpression" value="0/5 * * * * ?"/>
    </bean>

    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="quartzCronTrigger"/>
            </list>
        </property>
<!--         <property name="dataSource" ref="dataSource"/> -->
		<!-- Job에서 applicationContext를 읽을 수 있게 해주는 설정 값 -->
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
        <property name="autoStartup" value="true"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="waitForJobsToCompleteOnShutdown" value="true"/>
        <!-- 만약 DB가 연결 되어 있다면 아래에 주석을 풀고 사용한다. -->
        <!-- Quartz가 DB기반으로 clustering으로 동작할 수 있도록 한다. -->
<!--         <property name="quartzProperties"> -->
<!--             <props> -->
<!--                 <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop> -->
<!--                 <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop> -->
<!--                 <prop key="org.quartz.jobStore.dataSource">dataSource</prop> -->
<!--                 <prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop> -->
<!--                 <prop key="org.quartz.jobStore.isClustered">true</prop> -->
<!--                 <prop key="org.quartz.jobStore.clusterCheckinInterval">1000</prop> -->
<!--                 <prop key="org.quartz.jobStore.misfireThreshold">1000</prop> -->
<!--                 <prop key="org.quartz.scheduler.instanceId">AUTO</prop> -->
<!--             </props> -->
<!--         </property> -->
    </bean>
</beans>